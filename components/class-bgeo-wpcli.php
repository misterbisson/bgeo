<?php

class bGeo_Wpcli extends WP_CLI_Command
{
/*
Some API commands, more at https://github.com/wp-cli/wp-cli/wiki/API
WP_CLI::error( 'message.' );
WP_CLI::warning( 'message.' );
WP_CLI::line( 'message.' );
WP_CLI::success( 'message.' );
*/


	// for i in $(seq 0 1 2700); do wp --url=site.org bgeo update_belongtos; done
	public function update_belongtos( $args, $assoc_args )
	{

		$limit = isset( $args[0] ) ? absint( $args[0] ) : 10;

		$results = (object) array(
			'updated' => 0,
			'updated_array' => array(),
			'failed' => 0,
			'failed_array' => array(),
		);

		global $wpdb;
		$sql = $wpdb->prepare('SELECT SQL_CALC_FOUND_ROWS
				api_id
			FROM ' . bgeo()->table . '
			WHERE 1 = 1
				AND api = "woeid"
				AND belongtos = ""
			LIMIT %d',
			$limit
		);

		$woeids = $wpdb->get_col( $sql );
		$found_rows = $wpdb->get_var( 'SELECT FOUND_ROWS()' );

		if ( ! is_array( $woeids ) )
		{
			WP_CLI::error( 'No rows appear to need updating.' );
			return;
		}

		foreach ( $woeids as $woeid )
		{
			$geo = bgeo()->new_geo_by_woeid( $woeid );

			if ( is_wp_error( $geo ) )
			{
				$results->failed++;
				$results->failed_array[] = $woeid;
				continue;
			}

			$geo->belongtos = bgeo()->get_belongtos( 'woeid', $woeid );
			bgeo()->update_geo( $geo->term_id, $geo->taxonomy, $geo );

			$results->updated++;
			$results->updated_array[] = $woeid;
		}

		if ( $results->failed )
		{
			$failures = "Failed to update $results->failed rows, including the following WOEIDs: " . implode( ',', $results->updated_array . '.' );
		}
		else
		{
			$failures = '';
		}

		WP_CLI::success( "Updated $results->updated rows, $found_rows remaining to go. $failures" );
		return;
	}

	public function migrate_post_geodata( $args, $assoc_args )
	{

		$limit = isset( $args[0] ) ? absint( $args[0] ) : 10;

		$results = (object) array(
			'updated' => 0,
			'updated_array' => array(),
			'failed' => 0,
			'failed_array' => array(),
		);

		/* The SQL generated by this query is incorrect, see formatted sql below
		$post_ids = get_posts( array(
			'fields' => 'ids',
			'limit' => $limit,
			'post_type' => bgeo()->post_types,
			'meta_query' => array(
				'relation' => 'AND',
				array(
					'key'     => 'bgeo_meta_canary',
					'compare' => 'NOT EXISTS',
				),
				array(
					'key'     => 'geo_latitude',
					'compare' => 'EXISTS',
				),
			),
		) );

		SELECT wp_23_posts.ID
		FROM wp_23_posts
		LEFT JOIN wp_23_postmeta ON (wp_23_posts.ID = wp_23_postmeta.post_id AND wp_23_postmeta.meta_key = 'bgeo_meta_canary')
		INNER JOIN wp_23_postmeta AS mt1 ON (wp_23_posts.ID = mt1.post_id)
		WHERE 1=1
		AND wp_23_posts.post_type IN ('post', 'page', 'attachment')
		AND ((wp_23_posts.post_status = 'publish'))
		AND ( wp_23_postmeta.post_id IS NULL AND mt1.meta_key = 'geo_latitude' )
		GROUP BY wp_23_posts.ID
		ORDER BY wp_23_posts.post_date DESC
		LIMIT 0, 5
		*/

		global $wpdb;
		$sql = $wpdb->prepare('SELECT SQL_CALC_FOUND_ROWS a.post_id
			FROM ' . $wpdb->postmeta . ' a
			LEFT JOIN ' . $wpdb->postmeta . ' b ON a.post_id = b.post_id AND b.meta_key = "bgeo_meta_canary"
			JOIN ' . $wpdb->posts . ' p ON a.post_id = p.ID AND p.post_type IN ("' . implode( '", "', bgeo()->post_types ) . '") AND p.post_status = "publish"
			WHERE 1=1
			AND a.meta_key = "geo_latitude"
			AND b.post_id IS NULL
			GROUP BY a.post_id
			LIMIT %d',
			$limit
		);

		$post_ids = $wpdb->get_col( $sql );
		$found_rows = $wpdb->get_var( 'SELECT FOUND_ROWS()' );

		foreach ( $post_ids as $post_id )
		{
			if ( ! $location = bgeo()->admin()->postmeta()->update_location_from_core_geo_meta( $post_id ) )
			{
				$results->failed++;
				$results->failed_array[] = $post_id;
				continue;
			}
			else
			{
				$results->updated++;
				$results->updated_array[] = $post_id;
			}
		}

		if ( $results->failed )
		{
			$failures = "Failed to update $results->failed posts, including the following IDs: " . implode( ',', $results->updated_array . '.' );
		}
		else
		{
			$failures = '';
		}

		WP_CLI::success( "Updated $results->updated posts, $found_rows remaining to go. $failures" );
		return;
	}


}//END class